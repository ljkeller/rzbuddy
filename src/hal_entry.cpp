#include "hal_data.h"

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
void handle_error(fsp_err_t err);
void handle_rzbuddy_state ();

#include "rzbuddy_pwm_manager.h"
#include "rzbuddy_state.h"
FSP_CPP_FOOTER



/*******************************************************************************************************************//**
 * main() is generated by the Configuration editor and is used to generate threads if an RTOS is used.
 * This function is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{
    fsp_err_t err = FSP_SUCCESS;
    /* Initializes the module. */
    err = R_GPT_Open(&g_timer_servo_ctrl, &g_timer_servo_cfg);
    /* Handle any errors. This function should be defined by the user. */
    handle_error(err);
    /* Start the timer. */
//    (void) R_GPT_Start(&g_timer_servo_ctrl);

    handle_rzbuddy_state();
    while (1)
        ;
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open (&g_ioport_ctrl, &g_bsp_pin_cfg);
    }
}

void handle_rzbuddy_state ()
{
    fsp_err_t err = FSP_SUCCESS;
    gpio_handler_mapping_t const gpio_mappings[2] = {
        {.gpio_pin = RZBUDDY_FEED_GPIO, .gpio_trigger = BSP_IO_LEVEL_HIGH, .handler = rzbuddy_dispense},
        {.gpio_pin = RZBUDDY_NUDGE_GPIO, .gpio_trigger = BSP_IO_LEVEL_LOW, .handler = rzbuddy_pwm_nudge} // default low
    };

    size_t n_mappings = sizeof(gpio_mappings) / sizeof(gpio_mappings[0]);
    while (1)
    {
        // Traverse the mappings and handle signals forever
        for (size_t i=0; i<n_mappings; i++)
        {
            if (gpio_mappings[i].handler == NULL) continue;

            if (R_BSP_PinRead((bsp_io_port_pin_t) gpio_mappings[i].gpio_pin) == gpio_mappings[i].gpio_trigger)
            {
                err = gpio_mappings[i].handler();
                handle_error(err);
            }
        }
    }
}

void handle_error(fsp_err_t err)
{
    while (err != FSP_SUCCESS)
    ;
}
